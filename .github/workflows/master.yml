# docsifyを使用してGitHub Pagesにデプロイするためのワークフロー

name: Deploy Docsify to GitHub Pages

# ワークフローの実行タイミングを制御します
on:
  # "master"ブランチへのプッシュまたはプルリクエストイベントでワークフローをトリガーします
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Actionsタブから手動でこのワークフローを実行することを許可します
  workflow_dispatch:

# ワークフロー実行は、順次または並行して実行できる1つ以上のジョブで構成されます
jobs:
  build:
    # ジョブが実行されるランナーの種類
    runs-on: ubuntu-latest

    # ステップは、ジョブの一部として実行されるタスクのシーケンスを表します
    steps:
      # リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.jsのセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      # 依存関係のインストール
      - name: Install dependencies
        run: npm ci

      # docsify-cliのインストール
      - name: Install docsify-cli
        run: npm install -g docsify-cli

      # 静的ファイルの準備
      - name: Prepare static files
        run: |
          # .nojekyllファイルが存在することを確認（GitHub Pagesでアンダースコアで始まるファイルを処理するため）
          touch .nojekyll
          
          # 静的ファイル生成用のディレクトリを作成
          mkdir -p dist
          cp .nojekyll dist/

      # docsifyでの静的ファイル生成
      - name: Generate static files with docsify
        run: npx docsify generate . -o dist

      # 静的ファイルの確認
      - name: List generated files
        run: ls -la dist

      # アーティファクトのアップロード
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # 生成された静的ファイルのみをアップロード
          path: './dist'

  deploy:
    needs: build
    permissions:
      contents: read
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
